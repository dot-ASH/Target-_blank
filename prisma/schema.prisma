generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    posts         Post[]
    accounts      Account[]
    sessions      Session[]
    newsletter    Boolean?
    thumb         String?
}

model Post {
    id              String    @id @default(cuid())
    title           String
    content         String?
    published       Boolean   @default(false)
    author          User?     @relation(fields: [authorId], references: [id])
    authorId        String?
    type            String?
    category        String?
    thumbImage      String?
    description     String?
    reactCount      Int?
    commentCount    Int?
    contentFileLink String?
    date            DateTime?
    reference       String?
}

// model VerificationToken {
//     id         Int      @id @default(autoincrement())
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

// model Admin {
//     id    Int     @id
//     name  String?
//     email String?
// }

// model Category {
//     id    Int     @id
//     name  String?
//     thumb String?
// }

// model Comment {
//     id        Int       @id
//     postId    Int?
//     commentBy Int?
//     comment   String?
//     date      DateTime?
//     postBy    Int?
// }

// model React {
//     id      Int  @id
//     postId  Int?
//     reactBy Int?
// }

// model Saved {
//     id      Int  @id
//     postId  Int?
//     savedBy Int?
// }

// model User {
//     id         Int      @id
//     fullName   String?
//     email      String?
//     username   String?
//     password   String?
//     provider   String?
//     newsletter Boolean?
//     thumb      String?
// }
